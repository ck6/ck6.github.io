use yourDatabaseName;

// -------------------------------------------------------
// Configuration
// -------------------------------------------------------
const TOTAL_CLUSTERS = 1_000_000;       // 1 million
const START_INDEX = 40;                // first clusterIndex = 40
const ROWS = 11;                       // each cluster has 11 rows
const COLS = 5;                        // each cluster has 5 columns
const TILES_PER_CLUSTER = ROWS * COLS; // 11×5 = 55
const TOTAL_TILES = TOTAL_CLUSTERS * TILES_PER_CLUSTER; // 55,000,000

// We'll process in 100 chunks of 10,000 clusters each
const CHUNK_COUNT = 100;
const CLUSTERS_PER_CHUNK = 10_000;    // 10,000 clusters per chunk
// Each chunk has 10,000 × 55 = 550,000 tiles

// We want 65% of all tiles to be non-zero
// 65% of 55,000,000 = 35,750,000 non-zero, 19,250,000 zero
const NONZERO_TOTAL = Math.floor(TOTAL_TILES * 0.65); // 35,750,000
const ZERO_TOTAL = TOTAL_TILES - NONZERO_TOTAL;        // 19,250,000

// Among NONZERO_TOTAL = 35,750,000
//   1 tile -> "1 BTC"
//   1,000,000 tiles -> "1 TON"
//   remainder -> "0.10 USDT" or "0.15 USDT"
const BTC_COUNT = 1;           // only once total
const TON_COUNT = 1_000_000;   // 1 million total
const USDT_COUNT = NONZERO_TOTAL - (BTC_COUNT + TON_COUNT); 
// => 35,750,000 - (1 + 1,000,000) = 34,749,999

// We'll distribute them evenly across 100 chunks
// Chunk #0: we place the 1 BTC
// Each chunk: some TON, some USDT, some 0
//    chunkNonZero = 65% of 550,000 = 357,500
// => chunkZero = 550,000 - 357,500 = 192,500
// For chunk #0: 
//    1 BTC + 10,000 TON + 347,499 USDT = 357,500 non-zero
// For chunk #1..#99:
//    0 BTC + 10,000 TON + 347,500 USDT = 357,500 non-zero

const PER_CHUNK_NONZERO = Math.floor(0.65 * (CLUSTERS_PER_CHUNK * TILES_PER_CLUSTER)); 
// => 357,500
const PER_CHUNK_ZERO = (CLUSTERS_PER_CHUNK * TILES_PER_CLUSTER) - PER_CHUNK_NONZERO;
// => 550,000 - 357,500 = 192,500

// For chunk #0
const BTC_IN_CHUNK0 = 1;
const TON_IN_CHUNK0 = 10_000;
const USDT_IN_CHUNK0 = PER_CHUNK_NONZERO - (BTC_IN_CHUNK0 + TON_IN_CHUNK0); 
// => 357,500 - (1 + 10,000) = 347,499

// For chunk #1..#99
const BTC_IN_OTHER_CHUNKS = 0;
const TON_IN_OTHER_CHUNKS = 10_000;
const USDT_IN_OTHER_CHUNKS = PER_CHUNK_NONZERO - (TON_IN_OTHER_CHUNKS + BTC_IN_OTHER_CHUNKS);
// => 357,500 - (10,000 + 0) = 347,500

// Safety checks
print("---- GLOBAL DISTRIBUTION ----");
print("Total clusters:", TOTAL_CLUSTERS, ", from index", START_INDEX, "to", START_INDEX + TOTAL_CLUSTERS - 1);
print("Tiles per cluster:", TILES_PER_CLUSTER, ", total tiles:", TOTAL_TILES);
print("We want 65% non-zero =>", NONZERO_TOTAL, ", 35% zero =>", ZERO_TOTAL);
print("Non-zero breakdown: 1 BTC, 1,000,000 TON, and", USDT_COUNT, "USDT tiles.");
print("---- PER-CHUNK DISTRIBUTION ----");
print("Each chunk has 10,000 clusters => 550,000 tiles.");
print("Chunk #0 => 1 BTC, 10,000 TON, 347,499 USDT, 192,500 zero.");
print("Chunk #1..#99 => 0 BTC, 10,000 TON, 347,500 USDT, 192,500 zero.");

// A helper to get random USDT
function getRandomUSDT() {
  return Math.random() < 0.5 ? "0.10 USDT" : "0.15 USDT";
}

// We’ll generate each chunk, shuffle it, assign rewards, build docs, insert.

for (let chunkIndex = 0; chunkIndex < CHUNK_COUNT; chunkIndex++) {
  print("\n--- Processing CHUNK #", chunkIndex, "---");

  // 1) Build tileRefs for this chunk: 10,000 clusters × 55 tiles = 550,000
  //    Each ref => { clusterIndex, row, col }
  const startClusterIndex = START_INDEX + (chunkIndex * CLUSTERS_PER_CHUNK);
  const endClusterIndex = startClusterIndex + CLUSTERS_PER_CHUNK - 1;
  print("Chunk clusters => from clusterIndex =", startClusterIndex, "to", endClusterIndex);

  const tileRefs = [];
  tileRefs.length = 0; // ensure empty
  const chunkSize = CLUSTERS_PER_CHUNK * TILES_PER_CLUSTER; // 550,000

  let idx = 0;
  for (let c = 0; c < CLUSTERS_PER_CHUNK; c++) {
    const clusterIdx = startClusterIndex + c;
    for (let r = 0; r < ROWS; r++) {
      for (let col = 0; col < COLS; col++) {
        tileRefs.push({
          clusterIndex: clusterIdx,
          row: r,
          col: col
        });
        idx++;
      }
    }
  }
  // safety check
  if (tileRefs.length !== chunkSize) {
    print("ERROR: tileRefs mismatch in chunk", chunkIndex, tileRefs.length, "!==", chunkSize);
    quit();
  }

  // 2) Shuffle tileRefs in-place (Fisher-Yates)
  function shuffleArray(arr) {
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
  }
  shuffleArray(tileRefs);

  // 3) Determine how many BTC, TON, USDT, ZERO for this chunk
  let btcThisChunk = 0;
  let tonThisChunk = 0;
  let usdtThisChunk = 0;
  let zeroThisChunk = 0;

  if (chunkIndex === 0) {
    btcThisChunk = BTC_IN_CHUNK0;           // 1
    tonThisChunk = TON_IN_CHUNK0;           // 10,000
    usdtThisChunk = USDT_IN_CHUNK0;         // 347,499
    zeroThisChunk = PER_CHUNK_ZERO;         // 192,500
  } else {
    btcThisChunk = BTC_IN_OTHER_CHUNKS;     // 0
    tonThisChunk = TON_IN_OTHER_CHUNKS;     // 10,000
    usdtThisChunk = USDT_IN_OTHER_CHUNKS;   // 347,500
    zeroThisChunk = PER_CHUNK_ZERO;         // 192,500
  }

  // 4) Assign rewards to tileRefs in the shuffled order
  //    We'll follow the pattern:
  //      - first `btcThisChunk` => "1 BTC"
  //      - next `tonThisChunk` => "1 TON"
  //      - next `usdtThisChunk` => random "0.10" or "0.15 USDT"
  //      - remainder => "0"
  let pos = 0;

  // BTC
  for (let i = 0; i < btcThisChunk; i++) {
    tileRefs[pos++].reward = "1 BTC";
  }
  // TON
  for (let i = 0; i < tonThisChunk; i++) {
    tileRefs[pos++].reward = "1 TON";
  }
  // USDT
  for (let i = 0; i < usdtThisChunk; i++) {
    tileRefs[pos++].reward = getRandomUSDT();
  }
  // ZERO
  // Everything left in the chunk is 0
  while (pos < tileRefs.length) {
    tileRefs[pos++].reward = "0";
  }

  // 5) Re-group tileRefs by clusterIndex => tiles[][] in memory
  const clustersMap = new Map();
  for (let i = 0; i < tileRefs.length; i++) {
    const { clusterIndex, row, col, reward } = tileRefs[i];
    if (!clustersMap.has(clusterIndex)) {
      // create empty 2D array for 11×5
      const arr2D = [];
      for (let rr = 0; rr < ROWS; rr++) {
        arr2D.push(new Array(COLS));
      }
      clustersMap.set(clusterIndex, arr2D);
    }
    clustersMap.get(clusterIndex)[row][col] = reward;
  }

  // 6) Build final docs + insert in a batch
  function buildRevealedArrays(rows, cols) {
    const revealed = [];
    const revealedBy = [];
    for (let rr = 0; rr < rows; rr++) {
      const revRow = [];
      const byRow = [];
      for (let cc = 0; cc < cols; cc++) {
        revRow.push(false);
        byRow.push(null);
      }
      revealed.push(revRow);
      revealedBy.push(byRow);
    }
    return { revealed, revealedBy };
  }

  const docsBuffer = [];
  for (let [cIndex, tiles2D] of clustersMap.entries()) {
    const { revealed, revealedBy } = buildRevealedArrays(ROWS, COLS);
    docsBuffer.push({
      clusterIndex: cIndex,
      tiles: tiles2D,
      revealed: revealed,
      revealedBy: revealedBy,
      createdAt: new Date(),
      updatedAt: new Date()
    });
  }

  // Insert this chunk
  // docsBuffer.length should be 10,000
  db.clusters.insertMany(docsBuffer);
  print("Inserted chunk #", chunkIndex, "=>", docsBuffer.length, "clusters.");
}

// Done!
print("\nAll chunks inserted! 1,000,000 clusters created with 65% non-zero rewards.");
